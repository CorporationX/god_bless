package faang.school.godbless.BJS2_5529;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Data
@AllArgsConstructor
public class UserAction {
    private int id;
    private String userName;
    private ActionType actionType;
    private LocalDateTime actionDate;
    private String content;

    public static List<Integer> getTopTenActiveUsers(List<UserAction> userActions) {

        return userActions.stream().
                collect(Collectors.groupingBy(UserAction::getId, Collectors.counting())). // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º
                        entrySet().stream()
                .sorted(Map.Entry.<Integer, Long>comparingByValue().reversed()) // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤
                .limit(10).map(Map.Entry::getKey).toList(); // –æ–±—Ä–µ–∑–∞–µ–º –¥–æ —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    }

    // —Ö–æ—Ç–µ–ª –≤–µ—Ä–Ω—É—Ç—å –∏–∑ –º–µ—Ç–æ–¥–∞ List<String> —Å –∫–æ–º–º–µ–Ω—Ç–∞–º–∏, –Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç, –º–æ–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ—á–∫—É?üòá
    public static List<UserAction> getTopFivePopularThemes(List<UserAction> userActions) {
        return userActions.stream().flatMap(
                        x -> Stream.concat(
                                userActions.stream().filter(post -> post.getActionType().equals(ActionType.POST)),
                                userActions.stream().filter(comment -> comment.getActionType().equals(ActionType.COMMENT)))
                ).filter(commentAndPost -> commentAndPost.getContent().matches("#.*")).
                collect(Collectors.groupingBy(Function.identity(), HashMap::new, Collectors.counting())).entrySet().stream().
                sorted(Map.Entry.<UserAction, Long>comparingByValue().reversed()).limit(5).map(Map.Entry::getKey).toList();
    }

    public static List<Integer> getTopThreeUsersByPostingComments(List<UserAction> userActions) {
        return userActions.stream().filter(user -> user.getActionType().equals(ActionType.COMMENT)).
                collect(Collectors.groupingBy(UserAction::getId, Collectors.counting())).entrySet().stream().
                sorted(Map.Entry.<Integer, Long>comparingByValue().reversed()).limit(3).map(Map.Entry::getKey).toList();
    }

    public static Map<ActionType, Double> getAnalyseActivities(List<UserAction> userActions) {

        return userActions.stream().
                collect(Collectors.groupingBy(UserAction::getActionType, Collectors.counting())).entrySet().stream().
                collect(Collectors.toMap(
                        Map.Entry::getKey,
                        entry -> Math.floor((double) entry.getValue() * 100 / userActions.size())
                ));


    }
}
