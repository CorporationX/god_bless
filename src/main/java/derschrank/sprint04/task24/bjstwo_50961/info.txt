Сбор данных для отчета
derschrank2000-S04-T24-BJS2-50961
derschrank.sprint04.task24.bjstwo_50961

Sprint04. Task24/10. CountDownLatch. Sales ReportGenerator
------------------------------------------------
Сбор данных для отчета
??? ??? (Дополнительная задача)


Условия задачи
Вам нужно разработать сервис для сбора данных о продажах из нескольких магазинов и генерации итогового отчёта. Каждый магазин предоставляет свои данные, и все они должны быть собраны параллельно в несколько потоков. Только после того, как данные со всех магазинов будут собраны, необходимо сгенерировать итоговый отчёт. Для синхронизации используйте CountDownLatch.

Требования:
1?? Создайте класс SalesData, который будет хранить данные о продажах. Поля:
storeId — идентификатор магазина
sales — список продаж
Создайте класс Sales — содержит информацию о продажах: productId — идентификатор товара, timestamp — время продажи, quantity — количество проданного товара.

2?? Создайте класс DataCollector, который представляет собой поток для сбора данных о продажах.
Поля: storeId — идентификатор магазина, для которого происходит сбор данных, latch — объект CountDownLatch, который используется для синхронизации.
Метод fetchSalesFromStore() — собирает данные о продажах для данного магазина. На текущий момент можно возвращать пустой список или заглушки данных.
Класс должен реализовывать Runnable, чтобы его можно было запускать в отдельном потоке.
В методе run() классобирает данные о продажах для своего магазина и уменьшает счётчик на latch.countDown(), сигнализируя о завершении сбора данных.

3?? Создайте класс ReportGenerator, который будет генерировать итоговый отчёт:
Добавьте поле salesDataList — список данных о продажах со всех магазинов (тип List<SalesData>).
Добавьте метод generateReport() — генерирует отчёт на основе собранных данных (например, выводит все данные о продажах в консоль).

4?? Создайте класс Main, который запускает процесс сбора данных и генерации отчёта:
Создайте объект CountDownLatch с числом потоков, равным количеству магазинов.
Создайте несколько объектов DataCollector для каждого магазина.
Запустите потоки для сбора данных.
Сделайте так, чтобы главный поток ждал завершения всех потоков-коллекторов.
После завершения всех потоков сгенерируйте отчёт с помощью ReportGenerator.

Почему эта задача полезна?
В реальном мире часто возникает необходимость собирать данные из различных источников и использовать их для генерации отчётов или анализа. Использование многопоточности для сбора данных из каждого источника может значительно ускорить процесс и позволить быстрее получить необходимые результаты. Также использование CountDownLatch позволяет эффективно организовать синхронизацию потоков и гарантировать, что генерация отчёта будет запущена только после того, как будут собраны все необходимые данные.
------------------------------------------------
23:26:38: Executing ':derschrank.sprint04.task24.bjstwo_50961.Main.main()'…

> Task :compileJava
> Task :processResources NO-SOURCE
> Task :classes

> Task :derschrank.sprint04.task24.bjstwo_50961.Main.main()
REPORT OF STORES:
STORE: 1
 -> Art. 10000 on 2025-01-07, quantity: 1
 -> Art. 10001 on 2025-01-05, quantity: 6
 -> Art. 10002 on 2025-01-03, quantity: 11
 -> Art. 10003 on 2025-01-01, quantity: 16
 -> Art. 10004 on 2024-12-30, quantity: 21
 -> Art. 10005 on 2024-12-28, quantity: 26
 -> Art. 10006 on 2024-12-26, quantity: 31
 -> Art. 10007 on 2024-12-24, quantity: 36
 -> Art. 10008 on 2024-12-22, quantity: 41
 -> Art. 10009 on 2024-12-20, quantity: 46

STORE: 2
 -> Art. 10000 on 2025-01-07, quantity: 2
 -> Art. 10001 on 2025-01-05, quantity: 7
 -> Art. 10002 on 2025-01-03, quantity: 12
 -> Art. 10003 on 2025-01-01, quantity: 17
 -> Art. 10004 on 2024-12-30, quantity: 22
 -> Art. 10005 on 2024-12-28, quantity: 27
 -> Art. 10006 on 2024-12-26, quantity: 32
 -> Art. 10007 on 2024-12-24, quantity: 37
 -> Art. 10008 on 2024-12-22, quantity: 42
 -> Art. 10009 on 2024-12-20, quantity: 47

STORE: 3
 -> Art. 10000 on 2025-01-07, quantity: 3
 -> Art. 10001 on 2025-01-05, quantity: 8
 -> Art. 10002 on 2025-01-03, quantity: 13
 -> Art. 10003 on 2025-01-01, quantity: 18
 -> Art. 10004 on 2024-12-30, quantity: 23
 -> Art. 10005 on 2024-12-28, quantity: 28
 -> Art. 10006 on 2024-12-26, quantity: 33
 -> Art. 10007 on 2024-12-24, quantity: 38
 -> Art. 10008 on 2024-12-22, quantity: 43
 -> Art. 10009 on 2024-12-20, quantity: 48

STORE: 4
 -> Art. 10000 on 2025-01-07, quantity: 4
 -> Art. 10001 on 2025-01-05, quantity: 9
 -> Art. 10002 on 2025-01-03, quantity: 14
 -> Art. 10003 on 2025-01-01, quantity: 19
 -> Art. 10004 on 2024-12-30, quantity: 24
 -> Art. 10005 on 2024-12-28, quantity: 29
 -> Art. 10006 on 2024-12-26, quantity: 34
 -> Art. 10007 on 2024-12-24, quantity: 39
 -> Art. 10008 on 2024-12-22, quantity: 44
 -> Art. 10009 on 2024-12-20, quantity: 49

STORE: 5
 -> Art. 10000 on 2025-01-07, quantity: 5
 -> Art. 10001 on 2025-01-05, quantity: 10
 -> Art. 10002 on 2025-01-03, quantity: 15
 -> Art. 10003 on 2025-01-01, quantity: 20
 -> Art. 10004 on 2024-12-30, quantity: 25
 -> Art. 10005 on 2024-12-28, quantity: 30
 -> Art. 10006 on 2024-12-26, quantity: 35
 -> Art. 10007 on 2024-12-24, quantity: 40
 -> Art. 10008 on 2024-12-22, quantity: 45
 -> Art. 10009 on 2024-12-20, quantity: 50

STORE: 6
 -> Art. 10000 on 2025-01-07, quantity: 6
 -> Art. 10001 on 2025-01-05, quantity: 11
 -> Art. 10002 on 2025-01-03, quantity: 16
 -> Art. 10003 on 2025-01-01, quantity: 21
 -> Art. 10004 on 2024-12-30, quantity: 26
 -> Art. 10005 on 2024-12-28, quantity: 31
 -> Art. 10006 on 2024-12-26, quantity: 36
 -> Art. 10007 on 2024-12-24, quantity: 41
 -> Art. 10008 on 2024-12-22, quantity: 46
 -> Art. 10009 on 2024-12-20, quantity: 51

STORE: 7
 -> Art. 10000 on 2025-01-07, quantity: 7
 -> Art. 10001 on 2025-01-05, quantity: 12
 -> Art. 10002 on 2025-01-03, quantity: 17
 -> Art. 10003 on 2025-01-01, quantity: 22
 -> Art. 10004 on 2024-12-30, quantity: 27
 -> Art. 10005 on 2024-12-28, quantity: 32
 -> Art. 10006 on 2024-12-26, quantity: 37
 -> Art. 10007 on 2024-12-24, quantity: 42
 -> Art. 10008 on 2024-12-22, quantity: 47
 -> Art. 10009 on 2024-12-20, quantity: 52

STORE: 8
 -> Art. 10000 on 2025-01-07, quantity: 8
 -> Art. 10001 on 2025-01-05, quantity: 13
 -> Art. 10002 on 2025-01-03, quantity: 18
 -> Art. 10003 on 2025-01-01, quantity: 23
 -> Art. 10004 on 2024-12-30, quantity: 28
 -> Art. 10005 on 2024-12-28, quantity: 33
 -> Art. 10006 on 2024-12-26, quantity: 38
 -> Art. 10007 on 2024-12-24, quantity: 43
 -> Art. 10008 on 2024-12-22, quantity: 48
 -> Art. 10009 on 2024-12-20, quantity: 53

STORE: 9
 -> Art. 10000 on 2025-01-07, quantity: 9
 -> Art. 10001 on 2025-01-05, quantity: 14
 -> Art. 10002 on 2025-01-03, quantity: 19
 -> Art. 10003 on 2025-01-01, quantity: 24
 -> Art. 10004 on 2024-12-30, quantity: 29
 -> Art. 10005 on 2024-12-28, quantity: 34
 -> Art. 10006 on 2024-12-26, quantity: 39
 -> Art. 10007 on 2024-12-24, quantity: 44
 -> Art. 10008 on 2024-12-22, quantity: 49
 -> Art. 10009 on 2024-12-20, quantity: 54

STORE: 10
 -> Art. 10000 on 2025-01-07, quantity: 10
 -> Art. 10001 on 2025-01-05, quantity: 15
 -> Art. 10002 on 2025-01-03, quantity: 20
 -> Art. 10003 on 2025-01-01, quantity: 25
 -> Art. 10004 on 2024-12-30, quantity: 30
 -> Art. 10005 on 2024-12-28, quantity: 35
 -> Art. 10006 on 2024-12-26, quantity: 40
 -> Art. 10007 on 2024-12-24, quantity: 45
 -> Art. 10008 on 2024-12-22, quantity: 50
 -> Art. 10009 on 2024-12-20, quantity: 55


BUILD SUCCESSFUL in 8s
2 actionable tasks: 2 executed
23:26:47: Execution finished ':derschrank.sprint04.task24.bjstwo_50961.Main.main()'.
