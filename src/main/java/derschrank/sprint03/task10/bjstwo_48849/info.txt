Железный трон любой ценой
👩‍💻 🧠🧠




Условия задачи
Мы создаём приложение по мотивам сериала "Игра Престолов", где пользователи могут присоединиться к различным домам и бороться за контроль над Вестеросом. Когда пользователь присоединяется к дому, он должен выбрать роль (например, лорд, рыцарь, маг), но количество доступных ролей ограничено. Если все роли заняты, пользователь должен ждать, пока один из игроков не покинет свою роль и не освободит слот.

Требования:
1️⃣ Создайте класс House, который представляет дом в Вестеросе.

Добавьте поле, хранящее список доступных ролей.

Добавьте поле, хранящее текущее количество доступных ролей.

2️⃣ Создайте класс User, который представляет пользователя приложения. Добавьте поля для хранения имени пользователя, дома, к которому он присоединился, и выбранной роли.

3️⃣ Реализуйте метод joinHouse() в классе User, который:

Позволяет пользователю присоединиться к дому и выбрать роль.

Проверяет, есть ли доступные роли. Если роли заняты, поток пользователя блокируется до тех пор, пока слот не освободится.

4️⃣ Реализуйте метод leaveHouse() в классе User, который позволяет пользователю покинуть дом и освободить свою роль.

5️⃣ Реализуйте методы addRole() и removeRole() в классе House:

addRole() уменьшает количество доступных ролей, когда пользователь выбирает роль.

removeRole() увеличивает количество доступных ролей, когда пользователь освобождает роль.

В методе addRole() добавьте оповещение всех потоков о том, что роль освободилась.

6️⃣ Синхронизация работы потоков: В методах joinHouse() и leaveHouse() используйте синхронизацию с помощью synchronized, чтобы предотвратить одновременные изменения доступных ролей.

7️⃣ Проверьте работу программы с несколькими потоками

Почему эта задача полезна?
Эта задача полезна, так как даёт понимание принципов разработки различных типов приложений, где необходимо управлять доступностью ресурсов и обеспечивать их справедливое распределение между пользователями, таких как многопользовательские онлайн-игры, социальные сети или бизнес-приложения.

Для примера, компания Twitter использует подход с использованием метода notifyAll() для управления доступом к ресурсам в своей системе. В Twitter есть ограничения на количество запросов, которые могут быть выполнены в единицу времени, и если все запросы уже заняты, пользователи должны ждать, пока один из запросов не освободится. В этом случае метод notifyAll() используется для оповещения пользователей, которые ждут выполнения своих запросов, о том, что один из запросов освободился, и теперь они могут продолжить свою работу.

-------------------------

23:57:03: Executing ':derschrank.sprint03.task10.bjstwo_48849.Main.main()'…

> Task :compileJava
> Task :processResources NO-SOURCE
> Task :classes

> Task :derschrank.sprint03.task10.bjstwo_48849.Main.main()
User 1: Became the role: Role 0
User 9: Became the role: Role 1
User 8: Became the role: Role 2
User 7: Became the role: Role 3
User 6: Became the role: Role 4
User 5: House hasn't any vacant role. Wait for...
User 4: House hasn't any vacant role. Wait for...
User 3: House hasn't any vacant role. Wait for...
User 0: House hasn't any vacant role. Wait for...
User 2: House hasn't any vacant role. Wait for...
User 1: Released the role: Role 0, and now has role: null
User 5: Became the role: Role 0
User 2: House hasn't any vacant role. Wait for...
User 0: House hasn't any vacant role. Wait for...
User 3: House hasn't any vacant role. Wait for...
User 4: House hasn't any vacant role. Wait for...
User 6: Released the role: Role 4, and now has role: null
User 7: Released the role: Role 3, and now has role: null
User 8: Released the role: Role 2, and now has role: null
User 9: Released the role: Role 1, and now has role: null
User 4: Became the role: Role 1
User 3: Became the role: Role 2
User 0: Became the role: Role 3
User 2: Became the role: Role 4
User 5: Released the role: Role 0, and now has role: null
User 2: Released the role: Role 4, and now has role: null
User 0: Released the role: Role 3, and now has role: null
User 3: Released the role: Role 2, and now has role: null
User 4: Released the role: Role 1, and now has role: null
End!

BUILD SUCCESSFUL in 8s
2 actionable tasks: 2 executed
23:57:12: Execution finished ':derschrank.sprint03.task10.bjstwo_48849.Main.main()'.
