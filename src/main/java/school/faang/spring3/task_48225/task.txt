Ведьмак Геральт должен путешествовать по различным городам и убивать монстров. Для этого он использует магическую карту, которая позволяет определять оптимальный маршрут между городами и наименьшее количество времени, затраченного на путешествия.

Пусть Ведьмак набрал множество заданий на уничтожение различных монстров. Все эти монстры находятся в разных частях карты рядом с различными городами, а Ведьмак - у себя в замке. Получается, что путь до каждого из монстров совсем не близкий, а денег нужно заработать как можно скорее!

Поэтому Ведьмаку нужно быстро понять, какое одно единственное задание на уничтожение монстра будет выполнить быстрее всего, чтобы получить заслуженную плату. Для такого планирования у него есть прекрасный инструмент - магическая карта! Магическая она потому, что мы с вами ее реализуем. Так еще и с использованием многопоточности!

Карта работает следующим образом:

Из своего замка Ведьмак может увидеть расстояние до каждого города, доступного на карте.

Также он может увидеть на карте всех монстров, расположенных вокруг разных городов на некотором расстоянии от них. Монстры живут в лесах и пещерах, а не в самих городах!

Соответственно, Ведьмак открывает карту и рассчитывает, до какого монстра можно будет добраться быстрее всего (наиболее короткая дистанция).

Но что же тогда такого магического в этой карте? Вроде, все просто! Смотрим дистанцию - выдвигаемся в поход!

На самом деле городов на карте может быть очень много. А монстров разбросанных по всему миру - еще больше. Если Ведьмак будет планировать все варианты похода по очереди, то просто сойдет с ума!

Поэтому магия карты заключается в том, что она рассчитывает все оптимальные пути сама и одновременно. За счет многопоточности. А Ведьмаку затем остается лишь выбрать самый подходящий для него из показанных картой.

Требования задачи:

1. Создать класс Location. Он будет представлять местоположение на карте с координатами x и y.

2. Создать класс Monster. Поля:

name (название монстра)

location (местоположение монстра на карте, объект класса Location).

3. Создать класс City. Поля:

name (название города)

location (местоположение города на карте, объект класса Location).

4. Создать класс CityWorker, реализующий Runnable. Поля:

city (город)

monsters (список всех монстров на карте).

5. Реализовать метод run() в классе CityWorker:

Метод рассчитывает расстояние от замка Ведьмака (координаты (0, 0)) до города. Используем теорему Пифагора для расчёта расстояний.

Находит ближайшего к этому городу монстра.

Выводит на консоль маршрут: расстояние от замка до города плюс расстояние от города до ближайшего монстра.

6. Создать класс Witcher с методом main():

Создать списки городов и монстров.

Использовать ExecutorService для создания пула потоков.

Для каждого города создать объект CityWorker и передать его в пул потоков.

После завершения всех потоков, вывести общее время выполнения программы.

Провести сравнение времени выполнения программы в однопоточном и многопоточном режимах, а также при разном количестве потоков.

