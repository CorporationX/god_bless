Условие задачи
Вам нужно реализовать функцию, которая преобразует двумерный список строк в формат CSV.

CSV (Comma-Separated Values) — это текстовый формат для хранения табличных данных, где каждая строка представляет собой запись, а значения внутри строки разделены запятыми. Обычно используется для обмена данными между различными системами и программами. Например:

1, 2, 3, 4, 5
6, 7, 8, 9, 10
Для того, чтобы реализовать функцию преобразования, нужно использовать функциональные интерфейсы VectorJoiner и MatrixJoiner, чтобы объединить строки и столбцы.

@FunctionalInterface
public interface VectorJoiner<T> {
    T join(List<T> vector);
}

@FunctionalInterface
public interface MatrixJoiner<T> {
    T join(List<List<T>> matrix);
}
В процессе работы необходимо использовать замыкание одной лямбды на другой.

Требования:
1️⃣ Используйте функциональные интерфейсы

VectorJoiner<T> — соединяет список элементов типа T в одну строку, разделяя элементы через запятую.

MatrixJoiner<T> — соединяет список списков элементов типа T в одну строку, где каждая строка разделена новой строкой.

2️⃣ Реализуйте метод public static String toCsv(List<List<String>> table) — преобразует двумерный список строк в CSV-формат, используя интерфейсы VectorJoiner и MatrixJoiner.

3️⃣ Замыкание в MatrixJoiner должно позволить преобразовать каждый список в строку с помощью VectorJoiner, а затем объединить эти строки в один результат с переходом на новую строку.

4️⃣ Пример вызова:

toCsv(
    List.of(
        List.of("1", "2", "3", "4", "5"),
        List.of("6", "7", "8", "9", "10"),
        List.of("11", "12", "13", "14", "15"),
        List.of("16", "17", "18", "19", "20"),
        List.of("21", "22", "23", "24", "25")
    )
);
Ожидаемый результат:

1, 2, 3, 4, 5
6, 7, 8, 9, 10
11, 12, 13, 14, 15
16, 17, 18, 19, 20
21, 22, 23, 24, 25
Почему эта задача полезна?
В данном случае, мы учимся создавать и делать композицию собственных функциональных интерфейсов. Использование лямбд позволяет нам более компактно и читаемо записывать функциональные интерфейсы, без создания отдельных классов-реализаций. Также, здесь мы используем замыкание лямбды.