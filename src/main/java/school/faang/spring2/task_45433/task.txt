Условие задачи:
Вы — разработчик приложения Google Translator и работаете над функцией, которая позволит пользователям добавлять слова и их переводы в словарь. Нужно создать систему, которая будет принимать слово и его перевод, а затем сохранять их в словарь с помощью интерфейса BiConsumer.

Цель:
Создайте класс DictionaryProcessor, который будет использовать BiConsumer для обработки словаря.

Требования:
1️⃣ Создайте класс DictionaryProcessor с методом processWord, который добавляет слово и его перевод в словарь.

2️⃣ Метод processWord должен принимать на вход слово, его перевод и BiConsumer<String, String> для добавления в словарь.

3️⃣ Создайте лямбда-выражение для сохранения слова и его перевода в словарь, используя интерфейс BiConsumer.

4️⃣ Протестируйте свою систему, добавив несколько примеров слов и их переводов в словарь, и выведите результат.

Пример использования:
DictionaryProcessor dictionaryProcessor = new DictionaryProcessor();

// Создание словаря
Map<String, String> dictionary = new HashMap<>();

// Лямбда-выражение для добавления слова и его перевода в словарь
BiConsumer<String, String> addWordToDictionary = (word, translation) -> dictionary.put(word, translation);

// Добавление слов и их переводов
dictionaryProcessor.processWord("привет", "hello", addWordToDictionary);
dictionaryProcessor.processWord("мир", "world", addWordToDictionary);
dictionaryProcessor.processWord("программирование", "programming", addWordToDictionary);

// Выводим словарь
System.out.println("Словарь: " + dictionary);

Почему эта задача полезна?
Обратите внимание, что в примере Map создаётся вне объекта DictionaryProcessor. Т.е. DicitonaryProcessor ничего не знает про эту коллекцию! Он в принципе просто выполняет какие-то действия.

А вот Map используется уже внутри лямбды. Как это называется? Замыкание! Это когда внутри функции используются переменные созданные извне.

И посмотрите, что теперь можно делать: внутри функции мы замкнули мапу, а потом эту функцию уже передаем внутрь DictionaryProcessor. В результате, функция сохраняет доступ к внешней мапе и знает, куда всё ещё нужно складывать слова

Результат: для Google Translator мы теперь можем быстро создавать новые словари, например, для конкретного пользователя. Т.е. для каждого пользователя мы могли бы создать отдельную Map с его сохраненными словами, а затем передать её в функцию, которая затем может быть выполнена любым компонентом! В результате, писать фичи для Google Translator теперь можно гораздо быстрее!

