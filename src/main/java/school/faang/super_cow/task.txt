Описание

Вы пишете игру Supercow, в которой игроки сражаются с боссами на различных уровнях.
Каждый босс имеет определённое количество слотов для игроков, которые могут сражаться с ним одновременно.
Ваша задача — создать систему, которая управляет доступом игроков к сражению с боссом, следя за тем,
чтобы не было больше игроков, чем позволяет босс. Если все слоты заняты, игрок должен ждать, пока не освободится место.

Требования:
1️⃣ Создайте класс Boss с полями:

maxPlayers (final) — максимальное количество игроков, которые могут одновременно сражаться с боссом.

currentPlayers — текущее количество игроков, которые участвуют в сражении.

2️⃣ Реализуйте метод joinBattle(Player player), который:

Проверяет, есть ли свободные слоты для присоединения к сражению.

Если слоты есть, увеличивает количество занятых слотов и добавляет игрока в сражение.

Если все слоты заняты, игрок должен "ждать" с помощью метода wait(), пока один из слотов не освободится.

3️⃣ Реализуйте метод leaveBattle(Player player), который уменьшает currentPlayers и уведомляет
других игроков о доступности слота (notify()).

4️⃣ Синхронизируйте доступ к боссу с помощью ключевого слова synchronized, чтобы предотвратить
одновременный доступ нескольких потоков к одному и тому же боссу.

5️⃣ Создайте класс Player с полем name, представляющим имя игрока.

6️⃣ Реализуйте метод doBattle(Boss boss) в классе Player, который:

Пробует присоединиться к сражению через joinBattle.

Выполняет бой (например, имитация сражения через Thread.sleep).

Завершает бой через leaveBattle.

7️⃣ Проверьте работу программы, создав экземпляр класса Boss с ограниченным количеством слотов и несколько экземпляров класса
Player, которые будут пытаться присоединиться к сражению. Для каждого игрока создается поток, который вызывает метод doBattle