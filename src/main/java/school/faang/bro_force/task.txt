Описание

Вы разрабатываете новую версию игры Bro Force, где различные игровые объекты (враги, игроки, препятствия)
одновременно обновляют свои состояния. В процессе игры объекты взаимодействуют друг с другом,
изменяя общие переменные, такие как здоровье, позиции и очки. Это может привести к проблемам с целостностью данных,
если несколько объектов одновременно попытаются изменить общие ресурсы. Чтобы избежать таких проблем,
нужно использовать механизм блокировки через synchronized.

Требования:
1. Создайте класс Game с приватными полями:

score — общий счёт за игру (набранные всеми участниками очки).

lives — общее количество потерянных жизней всеми участниками.

Также создайте два объекта для синхронизации доступа к общему счётчику очков и количеству потерянных жизней соответственно.

2. Создайте метод update(), который:

Будет вызываться при каждом обновлении игры.

Блокирует доступ к счётчику очков и количеству жизней

3. Внутри метода update():

Увеличивайте общий счётчик очков на 1, если игрок набрал очки.

Уменьшайте общее количество жизней на 1, если игрок теряет жизнь.

Если у игрока больше нет жизней, вызывайте метод gameOver(), чтобы завершить игру.

4. Создайте приватный метод gameOver(), который обрабатывает окончание игры.

5. Запустите игру и вызывайте метод update() с использованием нескольких
 потоков в цикле для обновления игры на каждом шаге.