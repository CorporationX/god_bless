Условие задачи:

Представьте, что вы работаете в крупнейшей компании, имеющей дата-центры по всему миру. Ваша задача — создать систему для оптимального распределения ресурсов, которая обеспечит эффективное использование серверов в дата-центре.

Выполнение этой задачи поможет лучше понять концепции ООП, реализовать паттерн Стратегия и в целом попрактиковать навыки проектирования и реализации систем с использованием различных компонентов.

Цель: Научиться проектировать систему для управления ресурсами с использованием ООП и паттерна Стратегия, реализовав алгоритмы распределения нагрузки и управления энергопотреблением.

Требования:

Создайте класс Server с характеристиками:

double load — текущая нагрузка на сервер;

double maxLoad — максимальная нагрузка, которую сервер может выдержать;

double energyConsumption — текущее энергопотребление сервера.

Создайте класс DataCenter, который хранит список серверов.

 Создайте класс ResourceRequest с полем:

double load — запрашиваемая нагрузка, которую необходимо выделить из дата-центра.

Создайте класс DataCenterService, содержащий следующие методы:

addServer(Server server) — добавляет сервер в дата-центр;

removeServer(Server server) — удаляет сервер из дата-центра;

getTotalEnergyConsumption() — возвращает общее энергопотребление всех серверов в дата-центре;

allocateResources(ResourceRequest request) — выделяет ресурсы для запроса, распределяя нагрузку между серверами;

releaseResources(ResourceRequest request) — освобождает ресурсы после выполнения запроса.

Создайте интерфейс OptimizationStrategy с методом:

void optimize(DataCenter dataCenter) — метод оптимизации нагрузки.

Реализуйте паттерн Стратегия в DataCenterService. Создайте метод, который оптимизирует распределение нагрузки каждые полчаса, используя OptimizationStrategy.

В качестве доп. задания:

создайте реализации OptimizationStrategy, такие как LoadBalancingOptimizationStrategy и EnergyEfficiencyOptimizationStrategy, для распределения нагрузки по серверам или оптимизации энергопотребления.

реализуйте юнит-тесты для проверки корректности работы методов.

