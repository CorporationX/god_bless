В Spotify есть функция "Group Session", которая позволяет нескольким пользователям
управлять воспроизведением музыки в реальном времени, на одном устройстве или на
разных устройствах. Давайте реализуем её! Мы хотим сделать так, чтобы несколько пользователей
могли управлять воспроизведением музыки на разных устройствах одновременно, но при
этом избежать ситуаций, когда один пользователь перебивает другого.

Когда один пользователь изменяет состояние воспроизведения, он должен сначала захватить
блокировку, чтобы другой пользователь не мог изменить это состояние в то же время.
После того как состояние воспроизведения изменено, блокировка освобождается и другой
пользователь может захватить её и изменить состояние на своём устройстве.

Создайте класс Player с методами для управления воспроизведением музыки:
play(), pause(), skip() и previous().

Добавьте поле lock в класс Player. Это будет объект-блокировка, который позволит
синхронизировать доступ к изменению состояния воспроизведения на всех устройствах.

Добавьте переменную isPlaying в класс Player, которая будет отслеживать текущее
состояние воспроизведения музыки.

Внутри методов наша основная цель — вызвать synchronized (lock) для блокировки доступа
к переменной isPlaying другим потокам. Остальную логику можете дописать по своему усмотрению.
Учтите, что флаг isPlaying должен корректно переключаться в соответствующих методах.

В методе main() класса Music cоздаём четыре потока для выполнения каждого метода объекта player:
playThread, pauseThread, skipThread и previousThread. Для каждого потока используем лямбда-выражения
для вызова соответствующего метода объекта player. Запускаем все потоки методом start().